name: main

env:
  IMAGE_NAME: online-store
  IMAGE_TAG: ${{ github.sha }}
  CLUSTER_NAME: project-cluster
  CLUSTER_REGION: europe-central2

on:
  push:
    branches: [ "main" ]

jobs:
  editorconfig-checker:
    name: Editorconfig Checker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Editorconfig check
        uses: editorconfig-checker/action-editorconfig-checker@main
      - name: Editorconfig check
        run: editorconfig-checker

  markdown-lint:
    name: Markdown Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Markdown Lint
        run: npx markdown-cli *.md

  git-leaks:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: git-leaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: ["editorconfig-checker", "markdown-lint", "git-leaks"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Execute Unit Tests
        run: |-
          go mod download
          go test github.com/vladoiliev02/online-store/dao

  database-tests:
    name: Database Test
    needs: ["editorconfig-checker", "markdown-lint", "git-leaks"]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: db
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Execute migration test
        uses: joshuaavalon/flyway-action@v3.0.0
        with:
          url: jdbc:postgresql://postgres:5432/db
          user: user
          password: password

  sonar-cloud-sast:
    name: Sonar Cloud SAST
    needs: [database-tests, unit-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Sonar Cloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  snyk-sca:
    name: Snyk SCA
    needs: [database-tests, unit-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  push-image:
    name: Scan and Push Image
    needs: [sonar-cloud-sast, snyk-sca]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build docker image
        run: docker image build -t ${{ vars.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ vars.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      - name: Push docker image to registry
        run: |
          docker login --username ${{ vars.DOCKERHUB_USER }} --password ${{ secrets.DOCKERHUB_PASSWORD }}
          docker push ${{ vars.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker logout

  terrafrom:
    name: Terraform
    needs: [push-image]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
      - name: Terraform Refresh
        working-directory: ./terraform
        run: terraform refresh
        env:
          TF_VAR_gcp_credentials: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -input=false
        env:
          TF_VAR_gcp_credentials: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_gcp_credentials: ${{ secrets.GOOGLE_CREDENTIALS }}

  deploy:
    name: Deploy to GKE
    needs: [terrafrom]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GOOGLE_CREDENTIALS }}
          export_default_credentials: true
      - name: Configure Authentication
        run: |-
          gcloud --quiet auth configure-docker
      - name: Configure kubectl
        uses: google-github-actions/get-gke-credentials@v2.0.0
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.CLUSTER_NAME }}
      - name: Helm upgrade
        run: |
          echo "${{ secrets.HELM_VALUES }}" > ./helm/online-store/values.yaml
          helm upgrade --wait --timeout 300s  -i online-store -f ./helm/online-store/values.yaml --set app.image.tag=$IMAGE_TAG --set app.image.name=$IMAGE_NAME ./helm/online-store
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          draft: false
          prerelease: false
